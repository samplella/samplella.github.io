{"version":3,"file":"index.production.js","sources":["../../../autocomplete-shared/dist/esm/debounce.js","../../../autocomplete-shared/dist/esm/isEqual.js","../../../autocomplete-shared/dist/esm/noop.js","../../src/createClickedEvent.ts","../../src/createViewedEvents.ts","../../src/isAlgoliaInsightsHit.ts","../../src/createAlgoliaInsightsPlugin.ts","../../src/createSearchInsightsApi.ts","../../../autocomplete-shared/dist/esm/createRef.js"],"sourcesContent":["export function debounce(fn, time) {\n  var timerId = undefined;\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    if (timerId) {\n      clearTimeout(timerId);\n    }\n\n    timerId = setTimeout(function () {\n      return fn.apply(void 0, args);\n    }, time);\n  };\n}","function isPrimitive(obj) {\n  return obj !== Object(obj);\n}\n\nexport function isEqual(first, second) {\n  if (first === second) {\n    return true;\n  }\n\n  if (isPrimitive(first) || isPrimitive(second) || typeof first === 'function' || typeof second === 'function') {\n    return first === second;\n  }\n\n  if (Object.keys(first).length !== Object.keys(second).length) {\n    return false;\n  }\n\n  for (var _i = 0, _Object$keys = Object.keys(first); _i < _Object$keys.length; _i++) {\n    var key = _Object$keys[_i];\n\n    if (!(key in second)) {\n      return false;\n    }\n\n    if (!isEqual(first[key], second[key])) {\n      return false;\n    }\n  }\n\n  return true;\n}","export var noop = function noop() {};","import { AlgoliaInsightsHit, ClickedObjectIDsAfterSearchParams } from './types';\n\ntype CreateClickedEventParams = {\n  item: AlgoliaInsightsHit;\n  items: AlgoliaInsightsHit[];\n};\n\nexport function createClickedEvent({\n  item,\n  items,\n}: CreateClickedEventParams): Omit<\n  ClickedObjectIDsAfterSearchParams,\n  'eventName'\n> {\n  return {\n    index: item.__autocomplete_indexName,\n    objectIDs: [item.objectID],\n    positions: [1 + items.findIndex((x) => x.objectID === item.objectID)],\n    queryID: item.__autocomplete_queryID,\n  };\n}\n","import { AlgoliaInsightsHit, ViewedObjectIDsParams } from './types';\n\ntype CreateViewedEventsParams = {\n  items: AlgoliaInsightsHit[];\n};\n\nexport function createViewedEvents({\n  items,\n}: CreateViewedEventsParams): Array<Omit<ViewedObjectIDsParams, 'eventName'>> {\n  const objectIDsByIndexName = items.reduce<Record<string, string[]>>(\n    (acc, current) => {\n      acc[current.__autocomplete_indexName] = (\n        acc[current.__autocomplete_indexName] ?? []\n      ).concat(current.objectID);\n\n      return acc;\n    },\n    {}\n  );\n\n  return Object.keys(objectIDsByIndexName).map((indexName) => {\n    const objectIDs = objectIDsByIndexName[indexName];\n\n    return {\n      index: indexName,\n      objectIDs,\n    };\n  });\n}\n","import { AlgoliaInsightsHit } from './types';\n\nexport function isAlgoliaInsightsHit(hit: any): hit is AlgoliaInsightsHit {\n  return (\n    hit.objectID && hit.__autocomplete_indexName && hit.__autocomplete_queryID\n  );\n}\n","import {\n  AutocompleteState,\n  AutocompletePlugin,\n} from '@algolia/autocomplete-js';\nimport {\n  createRef,\n  debounce,\n  isEqual,\n  noop,\n} from '@algolia/autocomplete-shared';\n\nimport { createClickedEvent } from './createClickedEvent';\nimport { createSearchInsightsApi } from './createSearchInsightsApi';\nimport { createViewedEvents } from './createViewedEvents';\nimport { isAlgoliaInsightsHit } from './isAlgoliaInsightsHit';\nimport {\n  AlgoliaInsightsHit,\n  AutocompleteInsightsApi,\n  InsightsClient,\n  OnActiveParams,\n  OnItemsChangeParams,\n  OnSelectParams,\n} from './types';\n\nconst VIEW_EVENT_DELAY = 400;\n\ntype SendViewedObjectIDsParams = {\n  onItemsChange(params: OnItemsChangeParams): void;\n  items: AlgoliaInsightsHit[];\n  insights: AutocompleteInsightsApi;\n  state: AutocompleteState<any>;\n};\n\nconst sendViewedObjectIDs = debounce<SendViewedObjectIDsParams>(\n  ({ onItemsChange, items, insights, state }) => {\n    onItemsChange({\n      insights,\n      insightsEvents: createViewedEvents({ items }).map((event) => ({\n        eventName: 'Items Viewed',\n        ...event,\n      })),\n      state,\n    });\n  },\n  VIEW_EVENT_DELAY\n);\n\nexport type CreateAlgoliaInsightsPluginParams = {\n  /**\n   * The initialized Search Insights client.\n   *\n   * @link https://www.algolia.com/doc/ui-libraries/autocomplete/api-reference/autocomplete-plugin-algolia-insights/createAlgoliaInsightsPlugin/#param-insightsclient\n   */\n  insightsClient: InsightsClient;\n  /**\n   * Hook to send an Insights event when the items change.\n   *\n   * By default, it sends a `viewedObjectIDs` event.\n   *\n   * In as-you-type experiences, items change as the user types. This hook is debounced every 400ms to reflect actual items that users notice and avoid generating too many events for items matching \"in progress\" queries.\n   *\n   * @link https://www.algolia.com/doc/ui-libraries/autocomplete/api-reference/autocomplete-plugin-algolia-insights/createAlgoliaInsightsPlugin/#param-onitemschange\n   */\n  onItemsChange?(params: OnItemsChangeParams): void;\n  /**\n   * Hook to send an Insights event when an item is selected.\n   *\n   * By default, it sends a clickedObjectIDsAfterSearch event.\n   *\n   * @link https://www.algolia.com/doc/ui-libraries/autocomplete/api-reference/autocomplete-plugin-algolia-insights/createAlgoliaInsightsPlugin/#param-onselect\n   */\n  onSelect?(params: OnSelectParams): void;\n  /**\n   * Hook to send an Insights event when an item is active.\n   *\n   * By default, it doesn't send any events.\n   *\n   * @link https://www.algolia.com/doc/ui-libraries/autocomplete/api-reference/autocomplete-plugin-algolia-insights/createAlgoliaInsightsPlugin/#param-onactive\n   */\n  onActive?(params: OnActiveParams): void;\n};\n\nexport function createAlgoliaInsightsPlugin(\n  options: CreateAlgoliaInsightsPluginParams\n): AutocompletePlugin<any, undefined> {\n  const {\n    insightsClient,\n    onItemsChange,\n    onSelect: onSelectEvent,\n    onActive: onActiveEvent,\n  } = getOptions(options);\n\n  const insights = createSearchInsightsApi(insightsClient);\n  const previousItems = createRef<AlgoliaInsightsHit[]>([]);\n\n  const debouncedOnStateChange = debounce<{\n    state: AutocompleteState<any>;\n  }>(({ state }) => {\n    if (!state.isOpen) {\n      return;\n    }\n\n    const items = state.collections\n      .reduce<unknown[]>((acc, current) => {\n        return [...acc, ...current.items];\n      }, [])\n      .filter(isAlgoliaInsightsHit);\n\n    if (\n      !isEqual(\n        previousItems.current.map((x) => x.objectID),\n        items.map((x) => x.objectID)\n      )\n    ) {\n      previousItems.current = items;\n\n      if (items.length > 0) {\n        sendViewedObjectIDs({ onItemsChange, items, insights, state });\n      }\n    }\n  }, 0);\n\n  return {\n    name: 'aa.algoliaInsightsPlugin',\n    subscribe({ setContext, onSelect, onActive }) {\n      setContext({ algoliaInsightsPlugin: { insights } });\n\n      onSelect(({ item, state, event }) => {\n        if (!isAlgoliaInsightsHit(item)) {\n          return;\n        }\n\n        onSelectEvent({\n          state: state as AutocompleteState<any>,\n          event,\n          insights,\n          item,\n          insightsEvents: [\n            {\n              eventName: 'Item Selected',\n              ...createClickedEvent({ item, items: previousItems.current }),\n            },\n          ],\n        });\n      });\n\n      onActive(({ item, state, event }) => {\n        if (!isAlgoliaInsightsHit(item)) {\n          return;\n        }\n\n        onActiveEvent({\n          state: state as AutocompleteState<any>,\n          event,\n          insights,\n          item,\n          insightsEvents: [\n            {\n              eventName: 'Item Active',\n              ...createClickedEvent({ item, items: previousItems.current }),\n            },\n          ],\n        });\n      });\n    },\n    onStateChange({ state }) {\n      debouncedOnStateChange({ state: state as AutocompleteState<any> });\n    },\n    __autocomplete_pluginOptions: options,\n  };\n}\n\nfunction getOptions(options: CreateAlgoliaInsightsPluginParams) {\n  return {\n    onItemsChange({ insights, insightsEvents }) {\n      insights.viewedObjectIDs(...insightsEvents);\n    },\n    onSelect({ insights, insightsEvents }) {\n      insights.clickedObjectIDsAfterSearch(...insightsEvents);\n    },\n    onActive: noop,\n    ...options,\n  };\n}\n","import {\n  ClickedFiltersParams,\n  ClickedObjectIDsAfterSearchParams,\n  ClickedObjectIDsParams,\n  ConvertedFiltersParams,\n  ConvertedObjectIDsAfterSearchParams,\n  ConvertedObjectIDsParams,\n  InsightsClient,\n  ViewedFiltersParams,\n  ViewedObjectIDsParams,\n} from './types';\n\nexport function createSearchInsightsApi(searchInsights: InsightsClient) {\n  return {\n    /**\n     * Initializes Insights with Algolia credentials.\n     */\n    init(appId: string, apiKey: string) {\n      searchInsights('init', { appId, apiKey });\n    },\n    /**\n     * Sets the user token to attach to events.\n     */\n    setUserToken(userToken: string) {\n      searchInsights('setUserToken', userToken);\n    },\n    /**\n     * Sends click events to capture a query and its clicked items and positions.\n     *\n     * @link https://www.algolia.com/doc/api-reference/api-methods/clicked-object-ids-after-search/\n     */\n    clickedObjectIDsAfterSearch(\n      ...params: ClickedObjectIDsAfterSearchParams[]\n    ) {\n      if (params.length > 0) {\n        searchInsights('clickedObjectIDsAfterSearch', ...params);\n      }\n    },\n    /**\n     * Sends click events to capture clicked items.\n     *\n     * @link https://www.algolia.com/doc/api-reference/api-methods/clicked-object-ids/\n     */\n    clickedObjectIDs(...params: ClickedObjectIDsParams[]) {\n      if (params.length > 0) {\n        searchInsights('clickedObjectIDs', ...params);\n      }\n    },\n    /**\n     * Sends click events to capture the filters a user clicks on.\n     *\n     * @link https://www.algolia.com/doc/api-reference/api-methods/clicked-filters/\n     */\n    clickedFilters(...params: ClickedFiltersParams[]) {\n      if (params.length > 0) {\n        searchInsights('clickedFilters', ...params);\n      }\n    },\n    /**\n     * Sends conversion events to capture a query and its clicked items.\n     *\n     * @link https://www.algolia.com/doc/api-reference/api-methods/converted-object-ids-after-search/\n     */\n    convertedObjectIDsAfterSearch(\n      ...params: ConvertedObjectIDsAfterSearchParams[]\n    ) {\n      if (params.length > 0) {\n        searchInsights('convertedObjectIDsAfterSearch', ...params);\n      }\n    },\n    /**\n     * Sends conversion events to capture clicked items.\n     *\n     * @link https://www.algolia.com/doc/api-reference/api-methods/converted-object-ids/\n     */\n    convertedObjectIDs(...params: ConvertedObjectIDsParams[]) {\n      if (params.length > 0) {\n        searchInsights('convertedObjectIDs', ...params);\n      }\n    },\n    /**\n     * Sends conversion events to capture the filters a user uses when converting.\n     *\n     * @link https://www.algolia.com/doc/api-reference/api-methods/converted-filters/\n     */\n    convertedFilters(...params: ConvertedFiltersParams[]) {\n      if (params.length > 0) {\n        searchInsights('convertedFilters', ...params);\n      }\n    },\n    /**\n     * Sends view events to capture clicked items.\n     *\n     * @link https://www.algolia.com/doc/api-reference/api-methods/viewed-object-ids/\n     */\n    viewedObjectIDs(...params: ViewedObjectIDsParams[]) {\n      if (params.length > 0) {\n        searchInsights('viewedObjectIDs', ...params);\n      }\n    },\n    /**\n     * Sends view events to capture the filters a user uses when viewing.\n     *\n     * @link https://www.algolia.com/doc/api-reference/api-methods/viewed-filters/\n     */\n    viewedFilters(...params: ViewedFiltersParams[]) {\n      if (params.length > 0) {\n        searchInsights('viewedFilters', ...params);\n      }\n    },\n  };\n}\n","export function createRef(initialValue) {\n  return {\n    current: initialValue\n  };\n}"],"names":["debounce","fn","time","timerId","undefined","_len","arguments","length","args","Array","_key","clearTimeout","setTimeout","apply","isPrimitive","obj","Object","isEqual","first","second","keys","_i","_Object$keys","key","noop","createClickedEvent","item","items","index","__autocomplete_indexName","objectIDs","objectID","positions","findIndex","x","queryID","__autocomplete_queryID","createViewedEvents","objectIDsByIndexName","reduce","acc","current","concat","map","indexName","isAlgoliaInsightsHit","hit","sendViewedObjectIDs","onItemsChange","insights","state","insightsEvents","event","eventName","options","searchInsights","viewedObjectIDs","onSelect","clickedObjectIDsAfterSearch","onActive","getOptions","insightsClient","onSelectEvent","onActiveEvent","init","appId","apiKey","setUserToken","userToken","params","clickedObjectIDs","clickedFilters","convertedObjectIDsAfterSearch","convertedObjectIDs","convertedFilters","viewedFilters","previousItems","debouncedOnStateChange","isOpen","collections","filter","name","subscribe","setContext","algoliaInsightsPlugin","onStateChange","__autocomplete_pluginOptions"],"mappings":"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"}