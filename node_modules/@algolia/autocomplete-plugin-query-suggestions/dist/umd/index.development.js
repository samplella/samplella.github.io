/*! @algolia/autocomplete-plugin-query-suggestions 1.5.0 | MIT License | Â© Algolia, Inc. and contributors | https://github.com/algolia/autocomplete */
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global['@algolia/autocomplete-plugin-query-suggestions'] = {}));
}(this, (function (exports) { 'use strict';

  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);

      if (enumerableOnly) {
        symbols = symbols.filter(function (sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      }

      keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};

      if (i % 2) {
        ownKeys(Object(source), true).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }

    return target;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
  }

  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

    return arr2;
  }

  function _createForOfIteratorHelper(o, allowArrayLike) {
    var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];

    if (!it) {
      if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
        if (it) o = it;
        var i = 0;

        var F = function () {};

        return {
          s: F,
          n: function () {
            if (i >= o.length) return {
              done: true
            };
            return {
              done: false,
              value: o[i++]
            };
          },
          e: function (e) {
            throw e;
          },
          f: F
        };
      }

      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }

    var normalCompletion = true,
        didErr = false,
        err;
    return {
      s: function () {
        it = it.call(o);
      },
      n: function () {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      },
      e: function (e) {
        didErr = true;
        err = e;
      },
      f: function () {
        try {
          if (!normalCompletion && it.return != null) it.return();
        } finally {
          if (didErr) throw err;
        }
      }
    };
  }

  function getAttributeValueByPath(record, path) {
    return path.reduce(function (current, key) {
      return current && current[key];
    }, record);
  }

  var version = '1.5.0';

  var userAgents = [{
    segment: 'autocomplete-core',
    version: version
  }];

  var HIGHLIGHT_PRE_TAG = '__aa-highlight__';
  var HIGHLIGHT_POST_TAG = '__/aa-highlight__';

  function ownKeys$1(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);

      if (enumerableOnly) {
        symbols = symbols.filter(function (sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      }

      keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};

      if (i % 2) {
        ownKeys$1(Object(source), true).forEach(function (key) {
          _defineProperty$1(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys$1(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }

    return target;
  }

  function _defineProperty$1(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function createRequester(fetcher) {
    function execute(fetcherParams) {
      return fetcher({
        searchClient: fetcherParams.searchClient,
        queries: fetcherParams.requests.map(function (x) {
          return x.query;
        })
      }).then(function (responses) {
        return responses.map(function (response, index) {
          var _fetcherParams$reques = fetcherParams.requests[index],
              sourceId = _fetcherParams$reques.sourceId,
              transformResponse = _fetcherParams$reques.transformResponse;
          return {
            items: response,
            sourceId: sourceId,
            transformResponse: transformResponse
          };
        });
      });
    }

    return function createSpecifiedRequester(requesterParams) {
      return function requester(requestParams) {
        return _objectSpread(_objectSpread({
          execute: execute
        }, requesterParams), requestParams);
      };
    };
  }

  var _excluded = ["params"];

  function ownKeys$2(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);

      if (enumerableOnly) {
        symbols = symbols.filter(function (sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      }

      keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$1(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};

      if (i % 2) {
        ownKeys$2(Object(source), true).forEach(function (key) {
          _defineProperty$2(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys$2(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }

    return target;
  }

  function _defineProperty$2(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};

    var target = _objectWithoutPropertiesLoose(source, excluded);

    var key, i;

    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }

    return target;
  }

  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;

    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }

    return target;
  }

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray$1(arr) || _nonIterableSpread();
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function _unsupportedIterableToArray$1(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray$1(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen);
  }

  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray$1(arr);
  }

  function _arrayLikeToArray$1(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  }
  function fetchAlgoliaResults(_ref) {
    var searchClient = _ref.searchClient,
        queries = _ref.queries,
        _ref$userAgents = _ref.userAgents,
        userAgents$1 = _ref$userAgents === void 0 ? [] : _ref$userAgents;

    if (typeof searchClient.addAlgoliaAgent === 'function') {
      var algoliaAgents = [].concat(_toConsumableArray(userAgents), _toConsumableArray(userAgents$1));
      algoliaAgents.forEach(function (_ref2) {
        var segment = _ref2.segment,
            version = _ref2.version;
        searchClient.addAlgoliaAgent(segment, version);
      });
    }

    return searchClient.search(queries.map(function (searchParameters) {
      var params = searchParameters.params,
          headers = _objectWithoutProperties(searchParameters, _excluded);

      return _objectSpread$1(_objectSpread$1({}, headers), {}, {
        params: _objectSpread$1({
          hitsPerPage: 5,
          highlightPreTag: HIGHLIGHT_PRE_TAG,
          highlightPostTag: HIGHLIGHT_POST_TAG
        }, params)
      });
    })).then(function (response) {
      return response.results;
    });
  }

  var userAgents$1 = [{
    segment: 'autocomplete-js',
    version: version
  }];

  function ownKeys$3(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);

      if (enumerableOnly) {
        symbols = symbols.filter(function (sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      }

      keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};

      if (i % 2) {
        ownKeys$3(Object(source), true).forEach(function (key) {
          _defineProperty$3(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys$3(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }

    return target;
  }

  function _defineProperty$3(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }
  var createAlgoliaRequester = createRequester(function (params) {
    return fetchAlgoliaResults(_objectSpread$2(_objectSpread$2({}, params), {}, {
      userAgents: userAgents$1
    }));
  });

  /**
   * Retrieves Algolia results from multiple indices.
   */

  var getAlgoliaResults = createAlgoliaRequester({
    transformResponse: function transformResponse(response) {
      return response.hits;
    }
  });

  /** @jsx createElement */
  function getTemplates(_ref) {
    var onTapAhead = _ref.onTapAhead;
    return {
      item: function item(_ref2) {
        var item = _ref2.item,
            createElement = _ref2.createElement,
            components = _ref2.components;

        if (item.__autocomplete_qsCategory) {
          return createElement("div", {
            className: "aa-ItemWrapper"
          }, createElement("div", {
            className: "aa-ItemContent aa-ItemContent--indented"
          }, createElement("div", {
            className: "aa-ItemContentSubtitle aa-ItemContentSubtitle--standalone"
          }, createElement("span", {
            className: "aa-ItemContentSubtitleIcon"
          }), createElement("span", null, "in", ' ', createElement("span", {
            className: "aa-ItemContentSubtitleCategory"
          }, item.__autocomplete_qsCategory)))));
        }

        return createElement("div", {
          className: "aa-ItemWrapper"
        }, createElement("div", {
          className: "aa-ItemContent"
        }, createElement("div", {
          className: "aa-ItemIcon aa-ItemIcon--noBorder"
        }, createElement("svg", {
          viewBox: "0 0 24 24",
          fill: "currentColor"
        }, createElement("path", {
          d: "M16.041 15.856c-0.034 0.026-0.067 0.055-0.099 0.087s-0.060 0.064-0.087 0.099c-1.258 1.213-2.969 1.958-4.855 1.958-1.933 0-3.682-0.782-4.95-2.050s-2.050-3.017-2.050-4.95 0.782-3.682 2.050-4.95 3.017-2.050 4.95-2.050 3.682 0.782 4.95 2.050 2.050 3.017 2.050 4.95c0 1.886-0.745 3.597-1.959 4.856zM21.707 20.293l-3.675-3.675c1.231-1.54 1.968-3.493 1.968-5.618 0-2.485-1.008-4.736-2.636-6.364s-3.879-2.636-6.364-2.636-4.736 1.008-6.364 2.636-2.636 3.879-2.636 6.364 1.008 4.736 2.636 6.364 3.879 2.636 6.364 2.636c2.125 0 4.078-0.737 5.618-1.968l3.675 3.675c0.391 0.391 1.024 0.391 1.414 0s0.391-1.024 0-1.414z"
        }))), createElement("div", {
          className: "aa-ItemContentBody"
        }, createElement("div", {
          className: "aa-ItemContentTitle"
        }, createElement(components.ReverseHighlight, {
          hit: item,
          attribute: "query"
        })))), createElement("div", {
          className: "aa-ItemActions"
        }, createElement("button", {
          className: "aa-ItemActionButton",
          title: "Fill query with \"".concat(item.query, "\""),
          onClick: function onClick(event) {
            event.preventDefault();
            event.stopPropagation();
            onTapAhead(item);
          }
        }, createElement("svg", {
          viewBox: "0 0 24 24",
          fill: "currentColor"
        }, createElement("path", {
          d: "M8 17v-7.586l8.293 8.293c0.391 0.391 1.024 0.391 1.414 0s0.391-1.024 0-1.414l-8.293-8.293h7.586c0.552 0 1-0.448 1-1s-0.448-1-1-1h-10c-0.552 0-1 0.448-1 1v10c0 0.552 0.448 1 1 1s1-0.448 1-1z"
        })))));
      }
    };
  }

  function createQuerySuggestionsPlugin(options) {
    var _getOptions = getOptions(options),
        searchClient = _getOptions.searchClient,
        indexName = _getOptions.indexName,
        getSearchParams = _getOptions.getSearchParams,
        transformSource = _getOptions.transformSource,
        categoryAttribute = _getOptions.categoryAttribute,
        itemsWithCategories = _getOptions.itemsWithCategories,
        categoriesPerItem = _getOptions.categoriesPerItem;

    return {
      name: 'aa.querySuggestionsPlugin',
      getSources: function getSources(_ref) {
        var query = _ref.query,
            setQuery = _ref.setQuery,
            refresh = _ref.refresh,
            state = _ref.state;

        function onTapAhead(item) {
          setQuery("".concat(item.query, " "));
          refresh();
        }

        return [transformSource({
          source: {
            sourceId: 'querySuggestionsPlugin',
            getItemInputValue: function getItemInputValue(_ref2) {
              var item = _ref2.item;
              return item.query;
            },
            getItems: function getItems() {
              return getAlgoliaResults({
                searchClient: searchClient,
                queries: [{
                  indexName: indexName,
                  query: query,
                  params: getSearchParams({
                    state: state
                  })
                }],
                transformResponse: function transformResponse(_ref3) {
                  var hits = _ref3.hits;
                  var querySuggestionsHits = hits[0];

                  if (!query || !categoryAttribute) {
                    return querySuggestionsHits;
                  }

                  return querySuggestionsHits.reduce(function (acc, current, i) {
                    var items = [current];

                    if (i <= itemsWithCategories - 1) {
                      var categories = getAttributeValueByPath(current, Array.isArray(categoryAttribute) ? categoryAttribute : [categoryAttribute]).map(function (x) {
                        return x.value;
                      }).slice(0, categoriesPerItem);

                      var _iterator = _createForOfIteratorHelper(categories),
                          _step;

                      try {
                        for (_iterator.s(); !(_step = _iterator.n()).done;) {
                          var category = _step.value;
                          items.push(_objectSpread2({
                            __autocomplete_qsCategory: category
                          }, current));
                        }
                      } catch (err) {
                        _iterator.e(err);
                      } finally {
                        _iterator.f();
                      }
                    }

                    acc.push.apply(acc, items);
                    return acc;
                  }, []);
                }
              });
            },
            templates: getTemplates({
              onTapAhead: onTapAhead
            })
          },
          onTapAhead: onTapAhead,
          state: state
        })];
      },
      __autocomplete_pluginOptions: options
    };
  }

  function getOptions(options) {
    return _objectSpread2({
      getSearchParams: function getSearchParams() {
        return {};
      },
      transformSource: function transformSource(_ref4) {
        var source = _ref4.source;
        return source;
      },
      itemsWithCategories: 1,
      categoriesPerItem: 1
    }, options);
  }

  exports.createQuerySuggestionsPlugin = createQuerySuggestionsPlugin;
  exports.getTemplates = getTemplates;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=index.development.js.map
